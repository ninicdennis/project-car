// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_data {
  id                 String              @id @unique @db.Uuid
  email              String              @unique
  username           String              @unique
  image_url          String?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
  posts              posts[]
  user_profile       user_profile[]
  following_user     following[]         @relation("user")
  following_follower following[]         @relation("follower")
  post_comments      post_comments[]
  post_like_dislike  post_like_dislike[]
}

model user_profile {
  id             String           @id @unique @default(uuid()) @db.Uuid
  user_id        String           @db.Uuid
  banner_image   String?
  about          String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  Profile        user_data?       @relation(fields: [user_id], references: [id])
  profile_images profile_images[]
}

model profile_images {
  id         String        @id @unique @db.Uuid
  image_url  String?
  profile_id String        @db.Uuid
  Profile    user_profile? @relation(fields: [profile_id], references: [id])
}

model following {
  id                 String     @id @default(uuid()) @db.Uuid
  user_id            String     @db.Uuid
  follower_id        String     @db.Uuid
  following_user     user_data? @relation("user", fields: [user_id], references: [id])
  following_follower user_data? @relation("follower", fields: [follower_id], references: [id])
}

model posts {
  id                String              @id @default(uuid()) @db.Uuid
  user_id           String              @db.Uuid
  title             String
  message           String
  image_url         String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  Author            user_data?          @relation(fields: [user_id], references: [id])
  post_comments     post_comments[]
  post_like_dislike post_like_dislike[]
}

model post_comments {
  id            String     @id @default(uuid()) @db.Uuid
  user_id       String     @db.Uuid
  post_id       String     @db.Uuid
  message       String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  Post          posts?     @relation(fields: [post_id], references: [id])
  CommentAuthor user_data? @relation(fields: [user_id], references: [id])
}

model post_like_dislike {
  id       String     @id @default(uuid()) @db.Uuid
  user_id  String     @db.Uuid
  post_id  String     @db.Uuid
  User     user_data? @relation(fields: [user_id], references: [id])
  Post     posts?     @relation(fields: [post_id], references: [id])
  liked    Boolean
  disliked Boolean

  @@unique([user_id, post_id])
}
